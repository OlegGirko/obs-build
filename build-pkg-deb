#
# Debian dpkg specific functions.
#
################################################################
#
# Copyright (c) 1995-2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

deb_setup() {
    mkdir -p $BUILD_TARGET/var/lib/dpkg
    mkdir -p $BUILD_TARGET/var/log
    mkdir -p $BUILD_TARGET/etc/default
    :>> $BUILD_TARGET/var/lib/dpkg/status
    :>> $BUILD_TARGET/var/lib/dpkg/available
    :>> $BUILD_TARGET/var/log/dpkg.log
    :>> $BUILD_TARGET/etc/ld.so.conf
    :>> $BUILD_TARGET/etc/default/rcS
}

pkg_initdb_deb() {
    deb_setup
    # force dpkg into database to make epoch test work
    if ! test "$BUILD_TARGET/.init_b_cache/rpms/dpkg.deb" -ef "$BUILD_TARGET/.init_b_cache/dpkg.deb" ; then
	rm -f $BUILD_TARGET/.init_b_cache/dpkg.deb
	cp $BUILD_TARGET/.init_b_cache/rpms/dpkg.deb $BUILD_TARGET/.init_b_cache/dpkg.deb || cleanup_and_exit 1
    fi
    enter_target needroot dpkg -i --force all .init_b_cache/dpkg.deb >/dev/null 2>&1
}

pkg_prepare_deb() {
    :
}

pkg_install_deb() {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    ( cd $BUILD_TARGET && enter_target needroot dpkg --install --force all .init_b_cache/$PKG.deb 2>&1 || touch $BUILD_ROOT/exit ) | \
	perl -ne '$|=1;/^(Configuration file|Installing new config file|Selecting previously deselected|Selecting previously unselected|\(Reading database|Unpacking |Setting up|Creating config file|Preparing to replace dpkg|Preparing to unpack )/||/^$/||print'
    # ugly workaround for upstart system. some packages (procps) try
    # to start a service in their configure phase. As we don't have
    # a running upstart, we just link the start binary to /bin/true
    if test -e "$BUILD_TARGET/sbin/start"; then
	if test "$BUILD_TARGET/sbin/start" -ef "$BUILD_TARGET/sbin/initctl" ; then
	    echo "linking /sbin/start to /bin/true"
	    mv "$BUILD_TARGET/sbin/start" "$BUILD_TARGET/sbin/start.disabled"
	    ln -s "/bin/true" "$BUILD_TARGET/sbin/start"
	fi
    fi
    # another workaround, see bug bnc#733699
    rm -f "$BUILD_TARGET/var/run/init.upgraded"
}

pkg_erase_deb() {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    ( cd $BUILD_TARGET && enter_target needroot dpkg --purge --force all $PKG 2>&1 || touch $BUILD_ROOT/exit ) | \
	perl -ne '$|=1;/^(\(Reading database|Removing |Purging configuration files for )/||/^$/||print'
}

pkg_cumulate_deb() {
    return 1
}

pkg_verify_installed_deb() {
    return 1
}

pkg_finalize_deb() {
    echo "configuring all installed packages..."
    # configure all packages after complete installation, not for each package like rpm does
    # We need to run this twice, because of cyclic dependencies as it does not succeed on most
    # debian based distros in the first attempt.
    if ! enter_target needroot dpkg --configure --pending  2>&1; then
         echo "first configure attempt failed, trying again..."
         enter_target needroot dpkg --configure --pending  2>&1 || cleanup_and_exit 1
    fi
}

pkg_preinstall_deb() {
    ar x "$BUILD_TARGET/.init_b_cache/rpms/$PKG.deb"
    mkdir -p .init_b_cache/scripts/control
    $TAR -C .init_b_cache/scripts/control -z -f control.tar.gz
    if test -f "data.tar.gz" ; then
	$TAR -z -f data.tar.gz
    elif test -f "data.tar.xz" ; then
	$TAR -J -f data.tar.xz
    fi
    if test -e ".init_b_cache/scripts/$PKG.run" ; then
	test -e .init_b_cache/scripts/control/preinst && mv .init_b_cache/scripts/control/preinst ".init_b_cache/scripts/$PKG.pre"
	test -e .init_b_cache/scripts/control/postinst && mv .init_b_cache/scripts/control/postinst ".init_b_cache/scripts/$PKG.post"
    fi
    rm -rf .init_b_cache/scripts/control control.tar.gz data.tar.{g,x}z
}

pkg_runscripts_deb() {
    if ! test -e $BUILD_ROOT/var/lib/dpkg/status ; then
	deb_setup
    fi
    if test -e "$BUILD_TARGET/.init_b_cache/scripts/$PKG.pre" ; then
	echo "running $PKG preinstall script"
	(cd $BUILD_TARGET && enter_target needroot ".init_b_cache/scripts/$PKG.pre" install < /dev/null )
	rm -f "$BUILD_TARGET/.init_b_cache/scripts/$PKG.pre"
    fi
    if test -e "$BUILD_TARGET/.init_b_cache/scripts/$PKG.post" ; then
	echo "running $PKG postinstall script"
	(cd $BUILD_TARGET && enter_target needroot ".init_b_cache/scripts/$PKG.post" configure '' < /dev/null )
	rm -f "$BUILD_TARGET/.init_b_cache/scripts/$PKG.post"
    fi
}
